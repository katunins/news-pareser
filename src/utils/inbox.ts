import { inboxService } from "../services/inbox.service";
import { parse } from 'node-html-parser'

export async function getEmailCode() {
    try {
        console.log(`üåê –ó–∞–≥—Ä—É–∑–∫–∞ email ${inboxService.userName}@ ...`)
        const result = await inboxService.getInbox()
        const inbox = result?.data?.inbox || []
        if (inbox.length === 0) {
            throw new Error('–ü–æ—á—Ç–æ–≤—ã–π —è—â–∏–∫ –ø—É—Å—Ç–æ–π')
        }
        const newest = inbox.reduce((latest, item) => {
            return new Date(item.date) > new Date(latest.date) ? item : latest;
        }, inbox[0]);
        const email = await inboxService.getDetailEmail(newest.id)
        const { html } = email?.data?.message || {}
        if (!html) {
            throw new Error('–í Email –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö')
        }
        const root = parse(html)
        const element = root.querySelector('.email-fontSize28.email-marginBottom20.email-marginTop10')
        const code = element?.textContent
        if (!code) {
            console.log('‚ùå –ï–ª–µ–º–µ–Ω—Ç –≤ email –Ω–µ –Ω–∞–π–¥–µ–Ω', element)
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å url –∏–∑ –ø–∏—Å—å–º–∞ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏')
        }
        console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω code –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏', code)
        const response = await inboxService.delete(newest.id)
        if (response.data.delete) {
            console.log('‚úÖ Email —É–¥–∞–ª–µ–Ω')
        }
        const response_2 = await inboxService.delete(newest.id)
        return code
    } catch (error) {
        console.log('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ inbox', error)
    }
}

export async function getSubmitUrlFromEmail() {
    try {
        console.log(`üåê –ó–∞–≥—Ä—É–∑–∫–∞ email ${inboxService.userName}@ ...`)
        const result = await inboxService.getInbox()
        const inbox = result?.data?.inbox || []
        if (inbox.length === 0) {
            throw new Error('–ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ email')
        }
        const newest = inbox.reduce((latest, item) => {
            return new Date(item.date) > new Date(latest.date) ? item : latest;
        }, inbox[0]);
        const email = await inboxService.getDetailEmail(newest.id)
        const { subject, date, html } = email?.data?.message || {}
        if (!subject || !date || !html) {
            throw new Error('–í Email –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö')
        }
        const root = parse(html)
        const element = root.querySelector('a.email-link')
        const url = element?.getAttribute('href')
        if (!url) {
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å url –∏–∑ –ø–∏—Å—å–º–∞ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏')
        }
        console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω url –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏', url)
        const response = await inboxService.delete(newest.id)
        if (response.data.delete) {
            console.log('‚úÖ Email —É–¥–∞–ª–µ–Ω')
        }
        return url
    } catch (error) {
        console.log('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ inbox', error)
    }
}